#!/bin/bash

# Script principal de deploy do RPG System
set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ÑπÔ∏è  $1${NC}"
}

# Banner
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    RPG SYSTEM DEPLOY SCRIPT                 ‚ïë"
echo "‚ïë                     Old Dragon RPG                          ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    error "Docker n√£o est√° instalado. Instalando..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    log "Docker instalado com sucesso!"
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n√£o est√° instalado. Instalando..."
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    log "Docker Compose instalado com sucesso!"
fi

# Fun√ß√£o para parar servi√ßos existentes
stop_services() {
    log "Parando servi√ßos existentes..."
    
    # Parar containers espec√≠ficos se estiverem rodando
    docker stop old-dragon-rpg rpg_backend rpg_mysql 2>/dev/null || true
    docker rm old-dragon-rpg rpg_backend rpg_mysql 2>/dev/null || true
    
    # Parar via docker-compose
    docker-compose down --remove-orphans 2>/dev/null || true
    
    # Limpar containers √≥rf√£os
    docker container prune -f 2>/dev/null || true
    
    log "Containers existentes removidos"
}

# Fun√ß√£o para criar diret√≥rios necess√°rios
create_directories() {
    log "Criando diret√≥rios necess√°rios..."
    mkdir -p logs uploads database 2>/dev/null || true
    
    # Tentar alterar permiss√µes, mas n√£o falhar se n√£o conseguir
    chmod 755 logs uploads database 2>/dev/null || {
        warn "N√£o foi poss√≠vel alterar permiss√µes dos diret√≥rios (normal em alguns sistemas)"
    }
    
    log "Diret√≥rios criados"
}

# Fun√ß√£o para criar arquivo .env se n√£o existir
create_env_file() {
    if [ ! -f .env ]; then
        log "Criando arquivo .env..."
        cat > .env << EOF
# Configura√ß√µes do Sistema RPG
NODE_ENV=production
PORT=5000

# Configura√ß√µes do Banco de Dados
DATABASE_URL=mysql://rpg_user:rpg_pass_2024@mysql:3306/rpg_database
MYSQL_ROOT_PASSWORD=rpg_root_2024
MYSQL_DATABASE=rpg_database
MYSQL_USER=rpg_user
MYSQL_PASSWORD=rpg_pass_2024

# Configura√ß√µes do Expo/React Native
EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
REACT_NATIVE_PACKAGER_HOSTNAME=0.0.0.0

# Configura√ß√µes do ngrok
NGROK_AUTHTOKEN=33U5DE9pqa3Dk4GwWH8VdslC5iL_2Vrr1B4qxR6oc9mkEikah
NGROK_DOMAIN=nonlustrously-nonsustainable-ronny.ngrok-free.dev

# Configura√ß√µes de Seguran√ßa
JWT_SECRET=rpg-system-jwt-secret-2024
BCRYPT_ROUNDS=12
EOF
        log "Arquivo .env criado com configura√ß√µes padr√£o"
    else
        info "Arquivo .env j√° existe"
    fi
}

# Fun√ß√£o para construir e iniciar containers
start_containers() {
    log "Construindo e iniciando containers..."
    
    # Build da aplica√ß√£o
    docker-compose build --no-cache
    
    # Iniciar servi√ßos
    docker-compose up -d
    
    # Aguardar MySQL ficar pronto
    log "Aguardando MySQL ficar pronto..."
    sleep 15
    
    # Verificar se os containers est√£o rodando
    if docker-compose ps | grep -q "Up"; then
        log "Containers iniciados com sucesso!"
    else
        error "Erro ao iniciar containers"
        docker-compose logs
        exit 1
    fi
}

# Fun√ß√£o para configurar ngrok
setup_ngrok() {
    log "Configurando ngrok..."
    
    # Verificar se ngrok est√° instalado
    if ! command -v ngrok &> /dev/null; then
        log "Instalando ngrok..."
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update && sudo apt install ngrok
    fi
    
    # Configurar authtoken
    ngrok config add-authtoken 33U5DE9pqa3Dk4GwWH8VdslC5iL_2Vrr1B4qxR6oc9mkEikah
    
    # Copiar arquivo de configura√ß√£o
    if [ -f "ngrok.yml" ]; then
        cp ngrok.yml ~/.ngrok2/ngrok.yml
        log "Configura√ß√£o do ngrok aplicada"
    fi
}

# Fun√ß√£o para iniciar ngrok
start_ngrok() {
    log "Iniciando ngrok..."
    
    if command -v ngrok &> /dev/null; then
        # Iniciar ngrok em background
        nohup ngrok start rpg-app > logs/ngrok.log 2>&1 &
        sleep 3
        
        log "ngrok iniciado! Verifique os logs em logs/ngrok.log"
        log "Dom√≠nio: https://nonlustrously-nonsustainable-ronny.ngrok-free.dev"
    else
        warn "ngrok n√£o est√° instalado"
    fi
}

# Fun√ß√£o para mostrar status
show_status() {
    echo ""
    log "Status dos servi√ßos:"
    echo ""
    
    # Status do Docker
    if docker-compose ps | grep -q "Up"; then
        echo -e "  ${GREEN}‚úÖ Docker Containers: Rodando${NC}"
    else
        echo -e "  ${RED}‚ùå Docker Containers: Parados${NC}"
    fi
    
    # Status do MySQL
    if docker-compose exec mysql mysqladmin ping -h localhost --silent 2>/dev/null; then
        echo -e "  ${GREEN}‚úÖ MySQL: Conectado${NC}"
    else
        echo -e "  ${RED}‚ùå MySQL: Desconectado${NC}"
    fi
    
    # Status da aplica√ß√£o Expo
    if curl -s http://localhost:8081 > /dev/null 2>&1; then
        echo -e "  ${GREEN}‚úÖ Expo App: Online${NC}"
    else
        echo -e "  ${RED}‚ùå Expo App: Offline${NC}"
    fi
    
    # Status do backend
    if curl -s http://localhost:5000 > /dev/null 2>&1; then
        echo -e "  ${GREEN}‚úÖ Backend: Online${NC}"
    else
        echo -e "  ${RED}‚ùå Backend: Offline${NC}"
    fi
    
    # Status do ngrok
    if pgrep -f "ngrok" > /dev/null; then
        echo -e "  ${GREEN}‚úÖ ngrok: Rodando${NC}"
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è  ngrok: Parado${NC}"
    fi
    
    echo ""
    log "URLs de acesso:"
    echo "  üéÆ Expo App Local: http://localhost:8081"
    echo "  üîß Backend Local: http://localhost:5000"
    echo "  üåç P√∫blico: https://nonlustrously-nonsustainable-ronny.ngrok-free.dev"
    echo "  üìä ngrok Inspector: http://localhost:4040"
    echo ""
}

# Fun√ß√£o para mostrar logs
show_logs() {
    log "Mostrando logs dos containers..."
    docker-compose logs -f
}

# Fun√ß√£o principal
main() {
    case "${1:-deploy}" in
        "deploy")
            log "Iniciando deploy completo..."
            stop_services
            create_directories
            create_env_file
            start_containers
            setup_ngrok
            start_ngrok
            show_status
            ;;
        "start")
            log "Iniciando servi√ßos..."
            start_containers
            start_ngrok
            show_status
            ;;
        "stop")
            log "Parando servi√ßos..."
            stop_services
            pkill -f ngrok 2>/dev/null || true
            log "Servi√ßos parados"
            ;;
        "restart")
            log "Reiniciando servi√ßos..."
            stop_services
            start_containers
            start_ngrok
            show_status
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs
            ;;
        "ngrok")
            setup_ngrok
            start_ngrok
            ;;
        *)
            echo "Uso: $0 {deploy|start|stop|restart|status|logs|ngrok}"
            echo ""
            echo "Comandos:"
            echo "  deploy   - Deploy completo (padr√£o)"
            echo "  start    - Iniciar servi√ßos"
            echo "  stop     - Parar servi√ßos"
            echo "  restart  - Reiniciar servi√ßos"
            echo "  status   - Mostrar status"
            echo "  logs     - Mostrar logs"
            echo "  ngrok    - Configurar e iniciar ngrok"
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"
